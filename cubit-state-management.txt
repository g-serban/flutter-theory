cubit is a subset of bloc (called flutter_bloc)

in pubspec.yml you add:

dependencies:
bloc:
flutter_bloc:
equatable: (this package works with cubit and flutter together)

---------------------------------


app_cubits emits a new state after loading the initial one -> the data is saved in app_cubit_states -> app_cubit_logics receives the state from app_cubits, checks what the state is, goes through conditionals & does smth for that specific state (e.g. for LoadedState returns WelcomePage() --> which is basically just a redirect module); 
	-> but, you actually have to assign a button or image or whatever a onTap function to trigger that redirect (using for example BlocProvider.of<AppCubits>(context).goHome(); -> where goHome is a method that emits a new state found in app_cubits).





UI <-> cubit package -> we create a Cubit (class) -> emit()
		     -> we create States (class) -> they hold data
	
	-> being in the same package, Cubit knows about States, and then will emit() the states
	-> emiting a state: I know you want to do smth new or you changed a variable, so I should let the app know (emit()) -> 			redraw the UI


-------------------------------
-> BlocProvider & BlocBuilder--
-------------------------------

  blocProvider -> creates cubit (create: (context) => AppCubits())
			(we use this in main to create the cubit and get the Cubit logic state as a child)

	        -> holds cubit (each class and method is also a cubit) and we can access them using blocProvider (BlocProvider.of<AppCubits>(context).methodName();)




  blocBuilder -> checks states, and based on those states, it will trigger smth
  (we use this in app_cubit_logic.dart to handle routing)

	e.g. BlocBuilder<AppCubits, CubitStates>(builder: (context, state) {
        if (state is LoadedState) { do smth...

	BlocBuilder<AppCubits, CubitStates>(
          builder: (context, state) {
        if (state is WelcomeState) {
          return const WelcomePage();



e.g. 
	GestureDetector(
                          onTap: () {
                            BlocProvider.of<AppCubits>(context).getData();
                          }
                          child: Container(
                            width: 200,
                            child: ResponsiveButton(width: 120)),
                        ),
	aaaand 
	--> using blocBuilder, you can also access classes and properties inside the states using the state parameter

	e.g. 
	    return Scaffold(
      body: BlocBuilder<AppCubits, CubitStates>(builder: (context, state) {
        if (state is LoadedState) {
          var info = state.places; 
          print('debug 0x: ${info}');
	  ... later on you can use info to subtract data, like itemCount: info.length etc.

	or wrap evr in the blocbuilder
		 Widget build(BuildContext context) {
   		 	return BlocBuilder<AppCubits, CubitStates>(builder: (context, state) {
      		 	return Scaffold(
     				 body: Container( ...state.stuff),)})}


-------------------------------------

every cubit app should have an initial state -> 
    when we first create a cubit, we pass a state class (InitialState) and afterwards we create a new state (emit(WelcomeState());


basically it works like this:
	main.dart ->  home: BlocProvider<AppCubits> creates a cubit (create: (context) => AppCubits()) and shows the logic
												        (child: AppCubitLogic())

	app_cubit_logic -> BlocBuilder<AppCubits, CubitStates>  checks the states and does some conditional checking (if state is)
									         return WelcomePage(); else return otherPage();
				-> basically works like a route redirect, either go here or there

	app_cubits -> class AppCubits extends Cubit<CubitStates> { AppCubits() : super(InitialState()) { emit(WelcomeState()); }}  								cubit is initialized with initial state and then emits a new state	
	
	app_cubit_states  -> abstract class CubitStates extends Equatable {}, class InitialState extends CubitStates , etc...
				-> here we put the data that should be changed 				    
	

	
	app_cubit_states -> app_cubits -> app_cubit_logic -> main.dart home (create: cubit + child: app_cubit_logic)
 (states: init + other) (emit new state)  (conditionals: checks states and redirects)




	1.  in our app_cubit_states.dart page:

e.g.

abstract class CubitStates extends Equatable {}
// abstract class = another class can extend this class as well


   // we initialize every cubit app with an initialState
class InitialState extends CubitStates {
  late int x;  

  // here we put the data that should be changed , states should hold data
  @override
  List<Object> get props => [x];
}
	-> based on the x variable we want to trigger rebuilds when value changed 
		-> so if the variable is changed, we automatically get a rebuild of that part of the UI

   // once we initialize InitialState, we want to trigger a new state called WelcomeState
class WelcomeState extends CubitStates {
  @override
  List<Object> get props => [];
}




	2.  and then in the app_cubits.dart (in our cubit) page we initialize our state:

class AppCubit extends Cubit<CubitStates> {    // <CubitStates> is the Cubit state type  -> this is how Cubit knows about the 							 state classes
  AppCubit() : super(InitialState()) {
    // after initializing the state, we want to emit a new state (the welcome page in our case)
    emit(WelcomeState());
  }
}





	3. in our app_cubit_logic.dart page we do conditional checking (using blocBuilder) - we check the states and do smth

class AppCubitLogic extends StatefulWidget {
  AppCubitLogic({Key? key}) : super(key: key);

  @override
  State<AppCubitLogic> createState() => _AppCubitLogicState();
}

class _AppCubitLogicState extends State<AppCubitLogic> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocBuilder<AppCubits, CubitStates>(// checks the states
          // BlocBuilder has to know about cubits and states, hence  BlocBuilder<AppCubits, CubitStates>
          builder: (context, state) {
        // al builders in Flutter take a builder with a function

	// works like a route redirect, either go here or there
        if (state is WelcomeState) {
          return WelcomePage();  // trigger a new page using this cubit
        } else {
          return Container();
        }
      }),
    );
  }
}




	4.  in our main.dart page, at home: we use BlocProvider to create the cubit and show the logic 

	      home: BlocProvider<AppCubits>(
        create: (context) => AppCubits(), // create the cubit
        // we pass a child that holds all the cubits or that can check them
        child: AppCubitLogic(), // show the logic
        // based on this, do conditional checks 
        ),

