
width: double.maxFinite  -> takes the complete width 

-> ctrl + .  -> wrap with ...



	# add image
              child: Container(
                width: double.maxFinite,
                height: 300,
                decoration: BoxDecoration(
                  image: DecorationImage(
                    image: AssetImage('img/mountain.jpeg')
                  )

		# add stars painted depending on the gottenStars value (e.g. 1 blue 4 whites on a white background)
			int gottenStars = 1;
                        Wrap(
                          children: List.generate(5, (index) {
                            print(index);
                            return Icon(
                                Icons.star,
                                color: gottenStars > index
                                    ? Colors.blue : Colors.white);

* you can treat children as a child, 
	instead of children = []
	you say children = Container(),


Scaffold  ->  has body, bottomNavigationBar, etc.
							(anything name Bar usually has children, items containing a list)


container has child and takes only one argument (e.g. Row, Column, Scaffold, etc.)
row & column have children and take a list


Margin vs padding 

Margin means the spacing outside of the border, 
		while padding is the spacing inside of the border.
 Technically speaking, though, there is no such thing as margin in Flutter. 
 Under the hood it is just another Padding widget that wraps the DecoratedBox.
 


Container
	-> give a container padding (or margin), e.g. padding: const EdgeInsets.only(top: 70, left: 20),
			- so that you can move your containers position relative to the screen border
	-> you can give the container width and height as well 
	-> use decoration: BoxDecoration(borderRadiu: BorderRadius.smth())  -> if you want to have a border around the container 


-> use SizedBox(height: 40,) to have space between 2 elements (on the cross Axis)
	-> or you can use a container with padding: const EdgeInsets.only(top: 40)
	
	
Row _ and Column 
	-> both have crossAxisAligment and mainAxisAligment properties

Row 	
	-> if you have 2 items on a row and want one to the left and one to the right of the row you can add an expanded between them
		e.g. 
	row(
	  children: [
		Icon(),
		Expanded(child: Container()),
		Container()


--> TabBar is a little bit complicated to align
	e.g. put it in a container that has a Align child	
				-> alignment: Alignment.centerLeft
				child: TabBar ...
					-> labelPadding: const EdgeInsets.only(left: 20, right: 20)
					-> isScrollable: true
			-> they all work together so watchout !
			
	-> if you want to have a indicator, it only takes a Decoration as argument, so you need to create a class that extends
					Decoration, that has an override  createBoxPainter method which returns a circle box painter (create a 
																			class for that as well)
	
	-> indicator dot tip: final Offset circleOffset = Offset(configuration.size!.width / 2 - radius / 2, configuration.size!.height - radius);
						  canvas.drawCircle(offset + circleOffset, radius, _paint);
								-> (... extend BoxPainter {void pain {}}
			-> basically you'll have a dot under the TabBar text in the middle (see cubit state mng app home_page.dart)



